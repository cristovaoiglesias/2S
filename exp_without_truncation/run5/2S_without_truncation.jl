using Flux
using Plots
using Distributions
# using Turing
using StatsPlots
using Random
using CSV, DataFrames
using Dates
# Tutorial
#  https://dm13450.github.io/2020/12/19/EdwardAndFlux.html

using LaTeXStrings

# Include the module file with M=50 which is the number of submodels of ensemble
# this is done to allow the experiment begin with the same initial submodels in the ensemble.
include("/home/bolic/cris/fl/InitialEnsemble.jl")
using .InitialEnsemble


## BASIC FUNCTIONS

function RMSPE(ground_truth,estimation)
    # https://s2.smu.edu/tfomby/eco5385_eco6380/lecture/Scoring%20Measures%20for%20Prediction%20Problems.pdf
    # https://stats.stackexchange.com/questions/413249/what-is-the-correct-definition-of-the-root-mean-square-percentage-error-rmspe
    # https://www.sciencedirect.com/topics/earth-and-planetary-sciences/root-mean-square-error#:~:text=The%20RMSE%20statistic%20provides%20information,the%20better%20the%20model's%20performance.
# https://www.researchgate.net/profile/Adriaan-Brebels/publication/281718517_A_survey_of_forecast_error_measures/links/56f43b2408ae81582bf0a1a9/A-survey-of-forecast-error-measures.pdf
    mspe=mean(((ground_truth-estimation)./ground_truth).^2)
    rmspe=sqrt(mspe)
    return rmspe*100
end

function unpack(nn_params::AbstractVector)
    W1 = reshape(nn_params[1:20], 20, 1); #1x20
    b1 = reshape(nn_params[21:40], 20); #20

    W2 = reshape(nn_params[41:440], 20, 20);# 20x20
    b2 = reshape(nn_params[441:460], 20);#20

    W3 = reshape(nn_params[461:480], 1, 20);#20
    b3 = [nn_params[481]]

    return W1, b1, W2, b2, W3, b3
end

function nn_forward(xs, nn_params::AbstractVector)
    W1, b1, W2, b2, W3, b3 = unpack(nn_params)
    # nn = Chain(Dense(W₁, b₁, tanh), Dense(W₂, b₂))
    nn = Chain(Dense(W1, b1, relu),
                  Dense(W2, b2, relu),
                  Dense(W3, b3))
    return nn(xs)
end

function BBF(xs,ys,nn_params::AbstractVector)
    W1 = reshape(nn_params[1:20], 20, 1); #1x20
    b1 = reshape(nn_params[21:40], 20); #20

    W2 = reshape(nn_params[41:440], 20, 20);# 20x20
    b2 = reshape(nn_params[441:460], 20);#20

    W3 = reshape(nn_params[461:480], 1, 20);#20
    b3 = [nn_params[481]] #reshape(nn_params[2337:2368], 1);#1

    mlp = Chain(Dense(W1, b1, relu),
                  Dense(W2, b2, relu),
                  Dense(W3, b3))
    x_pred=mlp(xs)
    l=Flux.Losses.mse(x_pred, ys)
    return l
end

function credible_interval(dist)
    return quantile(dist, [0.025, 0.975])
end

function train_client(model,x,y,ep,idt=10)
    optimiser = Adam();
    train_data = Iterators.repeated((Array(x'), Array(y')), idt);
    function lossMSEtc(x, y)
        l=Flux.Losses.mse(model(x), y)
        # println(l)#," ",Flux.params(model))
        return l
    end
    # Flux.@epochs 250 Flux.train!(lossMSE, Flux.params(model), train_data, optimiser)
    epochs = ep
    for epoch in 1:epochs
        Flux.train!(lossMSEtc, Flux.params(model), train_data, optimiser)
        # You can add custom logging here if needed, or keep it quiet
    end
    params_model=[Flux.params(model)[1][:];Flux.params(model)[2][:];
                 Flux.params(model)[3][:];Flux.params(model)[4][:];
                 Flux.params(model)[5][:];Flux.params(model)[6][:]]
    return params_model
end
function params2nn(nn_params::AbstractVector)
    W1, b1, W2, b2, W3, b3 = unpack(nn_params)
    # nn = Chain(Dense(W₁, b₁, tanh), Dense(W₂, b₂))
    nn = Chain(Dense(W1, b1, relu),
                  Dense(W2, b2, relu),
                  Dense(W3, b3))
    return nn
end

##  generate the INITIAL training DATA OF ENSEMBLE.

f(x) = cos(x) + rand(Normal(0, 0.1))

xTrain = collect(-4:0.02:7.98)
# xTrain = collect(-4.75:0.02:1.7)
yTrain = f.(xTrain)
plot(xTrain, yTrain, seriestype=:scatter, label="Train Data")
plot!(xTrain, cos.(xTrain), label="Truth")


# The training data to build the initial ensemble of M models and train the initial w_pred and w_uq
x=xTrain[[Array(1:1:50);Array(120:1:180);Array(280:1:323);Array(400:1:450);Array(540:1:570)]]
# y=yTrain[[Array(1:1:50);Array(120:1:180);Array(280:1:323);Array(400:1:450);Array(540:1:570)]]
y=[-0.6546246153513355, -0.6770799364919654, -0.7324382523078716, -0.7275967209243985, -0.8627970578669415, -0.6485857174293695, -0.8444840852285688, -0.6356793765260966, -0.9844408736920812, -0.8147252368220123, -0.7960903017286002, -0.9282439614393723, -0.7881530572792456, -0.7713350455751763, -0.8459597802933861, -0.8293980230988941, -0.897507892419915, -0.7821771400592701, -0.9149096347993144, -0.804437755918612, -1.0934923821801346, -0.9664845790300806, -0.752701330074209, -0.9999360889403396, -0.9148039799693455, -1.1109600752244937, -1.0398290070543879, -0.7730582810954396, -1.0790714544055717, -0.9244675628540262, -1.0560584574947216, -0.9449109368447617, -0.9201055131041548, -0.8764418328711275, -0.9666476926602, -0.9104128208045433, -1.1494350666351933, -0.9670439419280831, -0.9696354198012063, -1.0905488957145872, -1.022975547180027, -1.0582131554290137, -1.1103322783337057, -0.9408110672856214, -0.9416275915412365, -0.9777370489914523, -0.9684093233651259, -0.9329837090760447, -1.0040169336235762, -0.9344297655525666, 0.060954848078509684, -0.043313990107577686, 0.04911638958814058, 0.13892072632292832, 0.10694610031485081, 0.10276106207112469, -0.033343034770978885, -0.17084674923821988, 0.08362128608906143, 0.2307944291356918, 0.09312682582652898, 0.2648212873799939, 0.18398604900443605, 0.23837766936596924, 0.20237070291921982, 0.15350381026166737, 0.2808660090297438, 0.4070354922066405, 0.20261254282391522, 0.4992186464297875, 0.3085856373013179, 0.1866474801835296, 0.320990843648573, 0.4453808440242035, 0.5043707383173087, 0.44120126135335147, 0.47082626700161134, 0.4914152198708356, 0.5337674646818206, 0.6292470704440416, 0.5604192213270424, 0.509941687930124, 0.49893016649452127, 0.5255648046132274, 0.6259112484997438, 0.6823750761722212, 0.6964831170289916, 0.7609017716386202, 0.8452402367073831, 0.6573796568626006, 0.515408242168034, 0.5871753662212371, 0.7118015256790903, 0.6855074348059969, 0.5948363771857784, 0.7998306603280494, 0.7209940472207097, 0.9850264196183349, 0.7228572763565881, 0.7867116155009874, 0.9717646749267623, 0.8597917600170926, 0.8330576167767547, 0.8495930196701957, 0.8789668973003498, 1.0385753093019092, 0.9655611773413234, 1.0129036950050323, 0.8402929698053146, 0.750065490019575, 0.7681087618452245, -0.1672875585000863, -0.017268305316421165, -0.16898039826456998, -0.14679017389836344, -0.09161800819350467, 0.08089718100591939, -0.2304438199653761, -0.12915765262422174, -0.08331020897104509, -0.1789589337150457, -0.44715635535437753, -0.2977347368517, -0.2749195671103246, -0.18049048297294498, -0.3785779849092903, -0.09684818107657905, -0.3341803449752112, -0.46257031194128095, -0.4639870852532688, -0.3721337405278696, -0.4523311983015491, -0.33933041982835466, -0.44204435952028576, -0.4845108566487512, -0.48656540308369134, -0.5446537716543984, -0.4148819218419479, -0.3981202265924692, -0.6174271176235989, -0.6137621105938429, -0.5542473277600418, -0.5332227593850133, -0.49632326133483046, -0.705841163260712, -0.6342371297806348, -0.8133238270644332, -0.6638112099556129, -0.7226798559510678, -0.7009322784112065, -0.6680974664278189, -0.6265491696102692, -0.7973901850249783, -0.8744769937914745, -0.939913009303357, -0.7422237672745747, -0.7154994584408676, -0.8141867081575336, -0.48292137250107486, -0.6081460058502854, -0.5919606227139629, -0.6557831607638429, -0.6465854509984261, -0.478105064983153, -0.6094817300999614, -0.46614925542741154, -0.49167738332665945, -0.3302035178584979, -0.4998535825358329, -0.4879476897838255, -0.5512389599741483, -0.3004660222014187, -0.2853366818423542, -0.33598224515147207, -0.38926206298992444, -0.3657458529361364, -0.46144486054567113, -0.2274226360128913, -0.2504872251764845, -0.02361572349224597, -0.13567749688548492, -0.3226025183130214, -0.19000245499904864, 0.03593956125485803, -0.09519506408124825, -0.2112309317613728, -0.1582278578431451, 0.018701576838815917, -0.08872289864413006, -0.13919092519198378, -0.03748543010870714, 0.06721408476825749, 0.01864725423452032, 0.03970295653150732, 0.057579732396309605, -0.11490236262922533, 0.09793336598237004, 0.0973177322634333, 0.054846728878361325, 0.14497689256151639, 0.127050102544834, 0.30462025839539086, 0.1880119809637499, 0.14433652625277585, 0.13523822268505561, 0.26053439255738203, 0.9081047715497008, 0.9355998510213308, 0.7881563308782414, 0.9085078314040601, 0.6124475792256925, 0.6862109229665616, 0.923265547538979, 0.8107454035559275, 0.8178685338355274, 0.8809773400559885, 0.6877006479942385, 0.7816928657056375, 0.9159814385101913, 0.8348817899543718, 0.5766578868710525, 0.65126383897542, 0.7130258886277903, 0.57613233783057, 0.9466532629118555, 0.7671730536501625, 0.6861260802157539, 0.6868267828925444, 0.5954221629536156, 0.47519098328994863, 0.6029052329845926, 0.6896587204580127, 0.5558760642413504, 0.445306626580954, 0.4453772015118261, 0.5183674773668522, 0.6088969975602531]

all_min_v=[]

ppp=plot(x, y, seriestype=:scatter, label="train Data")
plot!(xTrain, cos.(xTrain), label="Truth")



## STEP 1 of 2S algorithm - Server initialization (line 1)
# println("STEP 1 - Server initialization (line 1)")
# #
# # for i=1:100
# while size(estimated_params)[1] < 3

#     model = Chain(Dense(1, 20, relu),
#                   Dense(20, 20, relu),
#                   Dense(20, 1))
#
#     function lossMSE(x, y)
#         l=Flux.Losses.mse(model(x), y)
#         # println(l)#," ",Flux.params(model))
#         return l
#     end
#
#     # optimiser = Descent(0.1);
#     optimiser = Adam();
#     train_data = Iterators.repeated((Array(x'), Array(y')), 15);
#     # Flux.@epochs 250 Flux.train!(lossMSE, Flux.params(model), train_data, optimiser)
#
#     epochs = 350
#     for epoch in 1:epochs
#         Flux.train!(lossMSE, Flux.params(model), train_data, optimiser)
#         # You can add custom logging here if needed, or keep it quiet
#     end
#     xTest = collect(-4:0.02:7.98)
#     yOut =  model(xTest')
#
#     plot!(xTest, cos.(xTest),c=:lightblue, label=false,w=4)
#     plot!(xTest, yOut', c=:red,label=false,w=4,alpha = 0.5)
#     # if i%10==0
#     #     display(ppp)
#     # end
#
#     parameters_min_v=[Flux.params(model)[1][:];Flux.params(model)[2][:];Flux.params(model)[3][:];Flux.params(model)[4][:];Flux.params(model)[5][:];Flux.params(model)[6][:]]
#
#     min_v=BBF(Array(x'), Array(y'),parameters_min_v)
#     if min_v < 0.01
#         println("Minimum value of submodel of ensemble: ",min_v)
#         # println("Parameters of Minimum value of BBF: ",parameters_min_MLP)
#         append!(all_min_v,min_v)
#         append!(estimated_params,[parameters_min_v])
#         println(parameters_min_v)
#     end
#
# end
# savefig("/home/bolic/cris/fl/exp_with_truncation/test.png")
#


# # STEP 5 of 2S algorithm - distilling the global parameter from ensemble
println("STEP 5 - distilling the first two students from ensemble")

function distilling(all_params_ensemble,rr)

    U_unlabed_data = collect(-5:0.02:9) #unlabed dataset U

    all_prediction=[]
    for params in all_params_ensemble #all estimated parameters of initial ensemble
        yOut =  nn_forward(U_unlabed_data',params)
        append!(all_prediction,[yOut])
    end
    # compute the mean of predictions
    all_preds=vcat(all_prediction...)
    all_means_preds=mean(all_preds, dims=1)
    # compute the credible interval 95% of predictions
    all_ci=[]
    for i in 1:size(all_preds)[2]
        civ=[credible_interval(all_preds[:,i])]
        append!(all_ci,civ)
    end

    all_ci=hcat(all_ci...)'

    #create the labels of  datasets T_pred and T_uq for the two global models
    dt1=all_means_preds'  #label of T_pred
    dt2=all_ci'           #label of T_uq

    #training the two global models
    global nn_f = Chain(Dense(1, 20, relu),
                  Dense(20, 20, relu),
                  Dense(20, 1))

    global nn_fuq = Chain(Dense(1, 20, relu),
                Dense(20, 20, relu),
                Dense(20, 2))

    function lossMSE_f(x, y)
        l=Flux.Losses.mse(nn_f(x), y)
        # println(l)
        return l
    end
    function lossMSE_fuq(x, y)
        l=Flux.Losses.mse(nn_fuq(x), y)
        # println(l)
        return l
    end

    params_global_model=[]
    loss_trashold=1
    while loss_trashold > 1e-4
        global nn_f = Chain(Dense(1, 20, relu),
                      Dense(20, 20, relu),
                      Dense(20, 1))
        # optimiser = Descent(0.1);
        optimiser = Adam();
        train_data = Iterators.repeated((Array(U_unlabed_data'), Array(dt1')), 10); #T_pred dataset
        # Flux.@epochs 350 Flux.train!(lossMSE_f, Flux.params(nn_f), train_data, optimiser)
        epochs = 350
        for epoch in 1:epochs
            Flux.train!(lossMSE_f, Flux.params(nn_f), train_data, optimiser)
        end

        params_global_model=[Flux.params(nn_f)[1][:];Flux.params(nn_f)[2][:];
                     Flux.params(nn_f)[3][:];Flux.params(nn_f)[4][:];
                     Flux.params(nn_f)[5][:];Flux.params(nn_f)[6][:]]

        loss_trashold=BBF(Array(U_unlabed_data'), Array(dt1'),params_global_model)
        # println("Minimum value of BBF: ",loss_trashold)
    end

    #trashold for nnfuq can be 0.000541
    # optimiser = Adam();
    # train_data = Iterators.repeated((Array(U_unlabed_data'), Array(dt2)), 10);
    # Flux.@epochs 350 Flux.train!(lossMSE_fuq, Flux.params(nn_fuq), train_data, optimiser)
    #
    loss_trashold=1
    while loss_trashold > 0.001
        global nn_fuq = Chain(Dense(1, 20, relu),
                    Dense(20, 20, relu),
                    Dense(20, 2))

        optimiser = Adam();
        train_data = Iterators.repeated((Array(U_unlabed_data'), Array(dt2)), 10); #T_uq dataset
        # Flux.@epochs 350 Flux.train!(lossMSE_fuq, Flux.params(nn_fuq), train_data, optimiser)
        epochs = 350
        for epoch in 1:epochs
            Flux.train!(lossMSE_fuq, Flux.params(nn_fuq), train_data, optimiser)
        end
        loss_trashold=lossMSE_fuq(Array(U_unlabed_data'), Array(dt2))
        # println(loss_trashold)
    end


    # TEST THE w_pred and w_uq
    # d = Uniform(-5, 9)  #generating iid data for the test of 2 students
    # xTest = rand(d, 1000)
    # xTest = sort(xTest)

    xTest =[-4.990787646530237, -4.983241657315482, -4.960573127235882, -4.946647333626972, -4.9048472132185434, -4.9048338100081335, -4.8962181104050675, -4.8951904603743195, -4.8841697353279105, -4.859121827264618, -4.855787343717055, -4.842622165813337, -4.83102936405845, -4.822270873666087, -4.819341320797912, -4.797659168620839, -4.784150113557408, -4.7791634552279945, -4.776459978562002, -4.775635125193337, -4.7584018456248245, -4.753340130576565, -4.737886779187193, -4.71856122100089, -4.708352810609906, -4.703817865908506, -4.673136369635405, -4.66974535566938, -4.643451696542653, -4.640836097515868, -4.638255027567412, -4.635191737125433, -4.596600996318779, -4.595250791799668, -4.593750200795009, -4.592449715825237, -4.591863757888884, -4.563510245760438, -4.552186668652865, -4.552139051727975, -4.55047657857249, -4.5415692793151825, -4.5376950069318, -4.52431569692697, -4.5231447240261, -4.517984671823909, -4.492230066361713, -4.449112026893484, -4.444799753456262, -4.421751583490359, -4.416255010005586, -4.41172117119953, -4.406685793321435, -4.382125303938045, -4.3817715052192305, -4.3700932622077335, -4.349832187631876, -4.343815725974518, -4.3236112325352165, -4.31637750462401, -4.31444885068472, -4.313107493938099, -4.309060087089232, -4.303831837167303, -4.303037293787443, -4.300294160994698, -4.297481652057413, -4.2734056561818985, -4.271401739895451, -4.2623201632530305, -4.253510179750832, -4.220217081939495, -4.193480084510547, -4.175094928709408, -4.169964675197657, -4.1695319652409815, -4.125740541049554, -4.120919950219941, -4.074513822953228, -4.053699731959166, -4.046728954816956, -4.044190742644802, -4.040016071641366, -4.035086400630158, -4.010731180628665, -3.9911932441597897, -3.987158017617677, -3.9634856684411544, -3.921895795582116, -3.9176118964211866, -3.915175281307622, -3.9097422267931883, -3.9044528333482953, -3.8502474988808784, -3.84709683725314, -3.8441197669959903, -3.8313334142502375, -3.7980411086785653, -3.7751981950219164, -3.771070458079585, -3.759278323846699, -3.7411918166052143, -3.7153170314624004, -3.711326314372363, -3.6414799737209433, -3.6136678260835797, -3.611004025250402, -3.598765142446742, -3.587126717946108, -3.5698221731537694, -3.5561027952933992, -3.5265988632828202, -3.524532450969036, -3.5219266634134803, -3.5219143372554234, -3.520273764410546, -3.5181095405426217, -3.5087683861276844, -3.502408108967577, -3.4998154408707784, -3.4829895698193845, -3.4766409642025304, -3.468854609027418, -3.4498915875221634, -3.443457079621224, -3.4142567010048603, -3.386596534331991, -3.3780505086339327, -3.3318707661891938, -3.315032289510655, -3.314853335515336, -3.2964337228408827, -3.288192286495131, -3.2842230163832102, -3.274903827213585, -3.257072536381972, -3.251788696464171, -3.2264958114080295, -3.212523046272219, -3.1885638880213563, -3.173955884415367, -3.1710837064731336, -3.1434285885455857, -3.139914643806306, -3.135992176248169, -3.1321719568642274, -3.124505479884752, -3.1120183927458527, -3.062697970937677, -3.0427427120687147, -3.025256146816715, -3.001138120341203, -2.984551270494433, -2.9658578077869686, -2.955336695179237, -2.948124369229192, -2.9477208878562906, -2.9433989277232455, -2.9318829194070375, -2.930535025588979, -2.925131381125782, -2.920553083496173, -2.889075953558703, -2.87715534996442, -2.860508227201599, -2.8482037394622637, -2.847531266247537, -2.840870252342995, -2.8148026330018525, -2.8147468486664287, -2.8122141806605225, -2.789971643671528, -2.7269971173408045, -2.714190558857835, -2.6929572739351144, -2.681892494405851, -2.6766716882082098, -2.665477113621372, -2.6638269454582977, -2.6571455440001985, -2.6111826688581763, -2.605774266482153, -2.599897519183055, -2.577235812143435, -2.5676626888147056, -2.5639735410845788, -2.5576315356602306, -2.5498448505399796, -2.4879796284128965, -2.4809686966873423, -2.4703214845367265, -2.469811628120755, -2.4549265140527776, -2.447111822722669, -2.441980041164554, -2.434458005096335, -2.396655932087814, -2.3933691565350115, -2.3827412681301148, -2.370310391924689, -2.3669696210241007, -2.3537353985508465, -2.3475859150944576, -2.341750295310998, -2.3301410799419235, -2.3249054352044465, -2.308951190549438, -2.27614402977007, -2.257925483364459, -2.2448554487437375, -2.232339851584264, -2.2248947100525447, -2.211415398140837, -2.1507994499351852, -2.1458190630323215, -2.136920510286779, -2.1347972351908258, -2.1198220532043814, -2.1159277797559737, -2.0907027043964552, -2.0838350051520442, -2.082136032059207, -2.081607601766064, -2.0738844811487898, -2.0478701671197213, -2.047485708702446, -2.0434894570729534, -2.0426929536373284, -2.0412689843646983, -2.02005824613855, -2.0136021272274207, -2.008680426724805, -1.9688500083837357, -1.9627902058097062, -1.9472198064691368, -1.908118490334255, -1.8903532574067112, -1.870193199638308, -1.8177990445079093, -1.782279247794329, -1.7655291264097714, -1.7611617296068145, -1.758210278908074, -1.74467707495296, -1.718836799655688, -1.7018815161417082, -1.6857491517691185, -1.6738336342328966, -1.6657256435319185, -1.6650243816172283, -1.6634502555221404, -1.6426073747344514, -1.637243702664497, -1.6349904387304077, -1.6284271396960723, -1.6145943265680502, -1.6119913706046387, -1.5972428484734191, -1.5885618495275255, -1.5854079673795685, -1.5785827964369465, -1.56550693549611, -1.5525313932792297, -1.5461273877122421, -1.5434138682408154, -1.5426540615715467, -1.535567030309184, -1.527377382772194, -1.5132548982347207, -1.480585267246291, -1.459485109837431, -1.4486880568786535, -1.4284587647601077, -1.3964295022666207, -1.3847863701721934, -1.3806516010408663, -1.3744773566328083, -1.36873469614671, -1.3554490346534642, -1.3480571183967553, -1.295917560927836, -1.2899715641120393, -1.2643691315624053, -1.2483964944260144, -1.2431958081540255, -1.2423706556111878, -1.2282361067265586, -1.2190697567635564, -1.215255032000993, -1.2150889771944886, -1.1986387857850183, -1.1890146852801022, -1.1748988836838397, -1.1449845581210605, -1.1323329775142539, -1.1254034778499484, -1.0991152349238469, -1.0855876724760511, -1.0816726524197078, -1.072656129999582, -1.0692658271676256, -1.053873788181714, -1.0391453785900668, -1.0376606063345806, -1.0296800910096184, -1.0114000329772734, -1.0022371227377231, -1.0004409590970145, -0.9967851104124721, -0.9833386220900229, -0.9704716234247064, -0.9660343578375512, -0.9656349725310438, -0.960234936232701, -0.9466427958161523, -0.943232414510371, -0.9225422799911431, -0.9216095151346009, -0.9167535119936039, -0.9055832313898664, -0.8856533167554321, -0.8719035249674469, -0.8540395952904101, -0.8265447469155376, -0.8091296685492777, -0.7777105897609848, -0.7475932248505677, -0.73207626643201, -0.7257684469432579, -0.7153301418368114, -0.6956045218938769, -0.6660551138103061, -0.6632074645401875, -0.63392173147429, -0.6305075566089346, -0.6159781419891726, -0.6062763057964862, -0.5906250166966096, -0.5766023868738541, -0.5605391725683031, -0.5525578157315838, -0.5156045563215352, -0.5052393437562746, -0.49063998002306874, -0.4835228609841309, -0.48120772701627956, -0.448652618178202, -0.42181592362824905, -0.4134580583938927, -0.4095287452388643, -0.4084236897362725, -0.397936601782904, -0.38245129416165025, -0.3670370982157092, -0.3561884351495399, -0.33252797348038854, -0.30944666411520494, -0.22254961565160514, -0.20312800168042067, -0.1860645692653815, -0.18423030849205002, -0.18085146946534625, -0.17048388058733455, -0.16448931160366342, -0.15929299719883705, -0.13590785297659735, -0.12927988899504061, -0.12619209163315404, -0.12123462130802132, -0.10860490300440695, -0.1061275978693228, -0.08687015653551189, -0.05775584239546383, -0.041412893740176315, -0.002117293656694663, 0.030826343162538627, 0.05557188138636793, 0.06706081839273281, 0.07225975505122761, 0.08443567287966758, 0.08568911239006383, 0.10773303810379264, 0.11194162528194873, 0.1290446804435934, 0.14071116969779673, 0.14510506697389314, 0.1476163704761957, 0.1573546433748234, 0.1631508142165039, 0.1646599966863178, 0.17889111558939774, 0.20526878043865437, 0.2100799174873993, 0.21259310815796617, 0.2759977177858399, 0.27712068865577955, 0.29954561006208547, 0.3035205927096545, 0.3124051006221471, 0.3306006896591551, 0.3368527757847275, 0.33990781038727835, 0.4121453139991562, 0.4131259952436874, 0.4356741209411563, 0.4546239662203462, 0.49743516925121867, 0.5140115313319162, 0.538682128312578, 0.5537602486360429, 0.5802453295452317, 0.5864079610890176, 0.5906145825045614, 0.6183390866627319, 0.6276772493006373, 0.6280398336266195, 0.6568466817454253, 0.7027186919691175, 0.7051046730737038, 0.7934402876777087, 0.8448430836305807, 0.8461628141948498, 0.8520859017946059, 0.8530381213304272, 0.8709086526358734, 0.8834984694772174, 0.8948692034763628, 0.9323440321957239, 0.9431338714501631, 0.9533853012377662, 0.9549382008824256, 0.9956975047877634, 1.01011020172996, 1.0299936463090127, 1.0338164449472185, 1.0410945624433694, 1.0426083625380755, 1.0447141317129915, 1.1032099099430264, 1.117591344091041, 1.1730174718324982, 1.1799150064986428, 1.190281173886718, 1.1998147675580695, 1.2007018644640324, 1.213093953298646, 1.2183323419199104, 1.237379256404676, 1.2506302230559037, 1.2736811076479881, 1.2952505965513526, 1.3034348264916389, 1.321186778338097, 1.3319387586094447, 1.3413801931864366, 1.3476350472182874, 1.3508854048092207, 1.3925480125161815, 1.40347447992806, 1.4447908626667116, 1.4455044599031837, 1.472662510233059, 1.486509276768822, 1.497179658510749, 1.5091921082105797, 1.5343894619478062, 1.5423966701716916, 1.5612352314341562, 1.561615278638775, 1.5831939938522774, 1.5836567164415705, 1.6200082668909044, 1.6225725016455135, 1.6371032057902752, 1.6374757093745442, 1.6514254375868056, 1.6520180871852848, 1.6664744162037968, 1.6743147439294415, 1.701659740366356, 1.7035733175683463, 1.711891233176157, 1.712828194448944, 1.7200448775955017, 1.7279657325642752, 1.7308426798144279, 1.7446476318455169, 1.7657185779177365, 1.7797472669548888, 1.82220704243504, 1.8318083062236656, 1.841847276764062, 1.8426211121520257, 1.8539094079071026, 1.8546901608541164, 1.8556737781328394, 1.8682615616494163, 1.883869314301192, 1.8867184611073737, 1.8868153429172896, 1.9195051903358813, 1.9290142762225546, 1.9573895786467803, 1.9581422877656944, 2.0057842844512193, 2.0078567275203216, 2.007939282992565, 2.015845614154708, 2.02200469766513, 2.0306134782586494, 2.0398979023225143, 2.0579846908693646, 2.144133348356892, 2.1445493207394195, 2.167460585134739, 2.171588195292422, 2.2262738503929773, 2.2328970562770225, 2.2455796197511138, 2.2625158910746244, 2.26367133781609, 2.2787899946286307, 2.2799960077530486, 2.280761382055349, 2.2891155721711804, 2.2933065078592687, 2.299422832720765, 2.3398227662443807, 2.3536952291926116, 2.3541028533943473, 2.3549432840785673, 2.3819387662230174, 2.3870154912533312, 2.405296057770893, 2.4089355127577132, 2.425451673843881, 2.4256422995801916, 2.4438339133739966, 2.448385592487898, 2.4584051232591513, 2.4958094156396964, 2.500616688739502, 2.503587172225794, 2.509745553088452, 2.5117023896047197, 2.5188918809076064, 2.5196871656558066, 2.521034587414123, 2.5306205523901797, 2.544264386487116, 2.5528166792878464, 2.556784392719263, 2.56198861190056, 2.562269426401774, 2.563588873168328, 2.567075504470411, 2.603256645962963, 2.604478210076829, 2.6238465615191426, 2.629245234168401, 2.6440511721137563, 2.651261089237205, 2.651331196187499, 2.6740706925998037, 2.7067858369175477, 2.7169874694065097, 2.7343618293037784, 2.7620503689778406, 2.7968737125818146, 2.7985470643938415, 2.8057102775602765, 2.814076008671667, 2.818331350045309, 2.8251367415467543, 2.8266601698150327, 2.830873858101439, 2.835990919787193, 2.86428218159232, 2.870895266391555, 2.873345633240021, 2.8983095162373065, 2.9064687026352978, 2.915029486613605, 2.9224188777879556, 2.934631427102108, 2.9470369835005377, 2.9818576897250235, 2.997790472430636, 3.0004851171602045, 3.0173295610548614, 3.0276076136355794, 3.054393491129783, 3.0552757237993724, 3.055813598641965, 3.0748427557397857, 3.084363872005163, 3.115335759216128, 3.1161960109548765, 3.1333980163662805, 3.157900166706085, 3.177685667013261, 3.1873552433059196, 3.2030837755051174, 3.212735594342071, 3.2200459898072538, 3.224029781624891, 3.2391218408348585, 3.2847873645463235, 3.2971701083196425, 3.2976266626344053, 3.3002369971069054, 3.3075684493181114, 3.317017990777485, 3.3195970248974334, 3.3203050313630147, 3.321641532671883, 3.336134781445608, 3.349678734679701, 3.3528256556972877, 3.3873357380846887, 3.403842640408561, 3.4269021989035124, 3.448448930461801, 3.4495046661920465, 3.463347736756873, 3.471987007205506, 3.4981800955789506, 3.516478821298051, 3.538849949835548, 3.5653529735018292, 3.5937919650205323, 3.595605469604518, 3.600640635880975, 3.609082808154879, 3.6455788239054634, 3.646064054154195, 3.6658207770980518, 3.6731281439676415, 3.700622331475804, 3.718617446353438, 3.728084983803118, 3.7342983099259026, 3.7437506473992315, 3.7450446710221126, 3.771168375910948, 3.7773740716428605, 3.80354860529555, 3.8145028959212084, 3.8493290574439065, 3.8926230486010756, 3.8933998947761115, 3.894590945957857, 3.928160925977185, 3.940429094633334, 3.9598404361959094, 3.975806453707243, 3.999052803231976, 4.007569177288877, 4.013344917637509, 4.015143817096364, 4.034641385682686, 4.037237203127923, 4.041476213974377, 4.066124183607354, 4.073701517366217, 4.089335337153823, 4.097495685005532, 4.126373050271351, 4.1321136091853425, 4.147978697334475, 4.1832328191323285, 4.207798751665923, 4.222828855149055, 4.225569763330212, 4.256684559233436, 4.2702831711377165, 4.274232881542616, 4.288828077694852, 4.296555271659722, 4.299284067701391, 4.327143233240507, 4.339485166509357, 4.3421577340645605, 4.342924363571825, 4.362179813337155, 4.363274935570665, 4.375006840932951, 4.375230451135087, 4.376138361283401, 4.376982029028216, 4.387357598337122, 4.387920007592417, 4.406058815763242, 4.408455093714753, 4.430643605686045, 4.435251366320035, 4.440174245853498, 4.44981765033628, 4.493707877655741, 4.497252753898927, 4.5008518868308265, 4.501184265030641, 4.513068755783005, 4.513335978755366, 4.525704216810588, 4.525989722187365, 4.533091344554478, 4.546670370838912, 4.573610182519042, 4.626531784529401, 4.626863691635915, 4.627080218878847, 4.64205537479903, 4.647003641081623, 4.702524598014852, 4.7047276324958744, 4.714482587678193, 4.723981517059272, 4.728091700826758, 4.740333422978395, 4.751796693052436, 4.752427847423537, 4.766008099269447, 4.793675610437546, 4.796054322012184, 4.7985674491692585, 4.80134451447624, 4.815589800884702, 4.83279511048255, 4.862435678912066, 4.86714488801962, 4.879800612606015, 4.880087233420305, 4.886516527312368, 4.909179221692947, 4.924039571478639, 4.955338858788576, 4.960192700229797, 4.964302433494893, 4.966561882965706, 4.970050059267313, 4.9774710716301005, 5.009246554464717, 5.0569390479479015, 5.062080969871348, 5.080109442116031, 5.081037086836478, 5.090775324850153, 5.09570059158202, 5.100963377253718, 5.102784050175737, 5.120498613828934, 5.12129598418143, 5.158033651113522, 5.1793883059520915, 5.180728531412905, 5.188596981876293, 5.190816920088764, 5.23791184962346, 5.274511823652004, 5.277190512291234, 5.292032828201549, 5.319813250158415, 5.340190577692551, 5.344905338403519, 5.402800784717623, 5.422456129166729, 5.432775093844215, 5.456215360591829, 5.4675851568322145, 5.469899620532114, 5.471296828622696, 5.486398581800252, 5.497018269231942, 5.512335493924988, 5.53623795255192, 5.549971700890419, 5.550507147355178, 5.57328958206069, 5.612961782932214, 5.637602641904852, 5.640874612043412, 5.670726682086514, 5.68037456618044, 5.7072741962072495, 5.753317961381242, 5.7547121080719705, 5.7651952609018995, 5.7750065546002, 5.775681070893702, 5.783675043660679, 5.800114837721798, 5.812065088758523, 5.839044369023819, 5.842619717789169, 5.853553503282811, 5.898632704400097, 5.912147222364876, 5.912245941630417, 5.960928179334676, 5.978299884473762, 5.99795121268585, 6.0057443852254195, 6.009875738364313, 6.023162896607191, 6.041213421087388, 6.055048705114361, 6.118158354095485, 6.120852608007192, 6.123790023291795, 6.128697002750002, 6.13004194765081, 6.144697950527963, 6.15955510694911, 6.16068875249832, 6.177046401879268, 6.203098677509399, 6.205844644986573, 6.244254374940795, 6.268973550399572, 6.280186946686767, 6.283802748310412, 6.295627107975207, 6.302209257137301, 6.311624235993838, 6.313750816291822, 6.374766826556174, 6.392939712122436, 6.403545885336738, 6.417743296723238, 6.419442398610453, 6.4341556413179095, 6.43608324686098, 6.495650588271147, 6.502126514807227, 6.529559356008033, 6.5322943626094965, 6.537560242025149, 6.547500383371714, 6.555076267501283, 6.574341531021698, 6.587778007439969, 6.621912366991088, 6.645426697970169, 6.677650618970972, 6.682628579699761, 6.699112034215974, 6.7287211539736305, 6.759484139878301, 6.761008844654455, 6.761036659381366, 6.786115389453181, 6.793671638693258, 6.800580746893951, 6.814797589806123, 6.828478305662895, 6.833939913747997, 6.8388538066921765, 6.842286895291238, 6.84876598115804, 6.850375253088583, 6.880327603543609, 6.880467794790572, 6.897379979753614, 6.897545565822449, 6.898076164475404, 6.904000180018116, 6.918570064027859, 6.927284851851368, 6.932016624302058, 6.959426964807337, 6.9642977094461305, 6.974359329229845, 6.985608973347844, 7.0001074900908975, 7.014026366878303, 7.054308711775191, 7.061061117050192, 7.069327166728327, 7.090796173319189, 7.099877022365236, 7.106770276446202, 7.135232590807641, 7.150901543731143, 7.163634143512022, 7.172035155868777, 7.192014787284565, 7.200407924867033, 7.201774992434727, 7.217273862210686, 7.260526861565541, 7.264158716846088, 7.307359140528476, 7.334135223729914, 7.364851735647054, 7.3828030833205, 7.383270432627391, 7.400458304248842, 7.401820258693732, 7.4147787438280535, 7.415688009179842, 7.418255749603999, 7.430123450975561, 7.446713821725968, 7.458726639818284, 7.470769849526542, 7.4839974244011, 7.506625973433543, 7.522087191449984, 7.549565638969872, 7.554658018733866, 7.563272798974262, 7.593329814821846, 7.6012170028987995, 7.609519548455685, 7.632943353685272, 7.677851166340709, 7.6900184804515614, 7.717674803204787, 7.731230802402127, 7.733326571315155, 7.7523825830364, 7.773444051646523, 7.775795437027265, 7.813362024147361, 7.817237070116542, 7.838740388625922, 7.842972304405233, 7.865246095339479, 7.869182231273168, 7.882668767734053, 7.88778412452265, 7.902360598616271, 7.906646793826834, 7.947677094819458, 7.955189138117829, 7.959981514169314, 7.971097860452588, 7.9906106937159525, 7.998929198679624, 8.022965724649604, 8.055889101858257, 8.073793963299856, 8.074185702612258, 8.09773107712817, 8.127538885839575, 8.153476116164319, 8.169376928808099, 8.170941355931953, 8.178808786349363, 8.205069627316782, 8.206789452917159, 8.210377860724233, 8.213356938562054, 8.229750485569507, 8.253846605741156, 8.258220332654522, 8.26483002123397, 8.329987112375571, 8.360775817372453, 8.364821408983042, 8.383830352395808, 8.40325753915967, 8.416117094433911, 8.433118564901777, 8.447919174242147, 8.452520648131447, 8.459283816031919, 8.467013939335844, 8.500029494489798, 8.503840845804875, 8.535635781007604, 8.538352897730231, 8.541903198897586, 8.544527988434767, 8.555645003499947, 8.560748404068839, 8.6315951812958, 8.6334513744676, 8.63835291416745, 8.645606943371057, 8.667236680421738, 8.688425638775652, 8.701282528592849, 8.717563667535115, 8.724474694008133, 8.768354205360332, 8.799927402289518, 8.80608144029692, 8.808951321236487, 8.822912694787991, 8.83565566942069, 8.846452908649088, 8.866003439697327, 8.868745633915633, 8.896381218153955, 8.928275024958186, 8.93118205776961, 8.952213371706147, 8.972452822938939]

    # ppp=plot(xTest, f.(xTest), seriestype=:scatter, label="train Data")
    # plot!(xTest, cos.(xTest), label="Truth")
    all_prediction=[]
    for params in all_params_ensemble #all estimated parameters of initial ensemble
        yOut =  nn_forward(xTest',params)
        append!(all_prediction,[yOut])
    end
    # compute the mean of predictions
    all_preds=vcat(all_prediction...)
    all_means_preds=mean(all_preds, dims=1)
    # compute the credible interval 95% of predictions
    all_ci=[]
    for i in 1:size(all_preds)[2]
        civ=[credible_interval(all_preds[:,i])]
        append!(all_ci,civ)
    end
    all_ci=hcat(all_ci...)'

    yOut =  nn_forward(xTest',params_global_model)
    pred_all_ci= nn_fuq(xTest')

     gr( xtickfontsize=12, ytickfontsize=12, xguidefontsize=12, yguidefontsize=12);

     # ppp=plot(x, y, seriestype=:scatter, xlabel="x", ylabel="y",grid=false,label="Server data",title="Round $(rr)")
     # plot!(xTest, cos.(xTest),c=:lightblue, label="True",w=4)
     # # plot!(xTest, all_means_preds', c=:red,label="mean Ens server",w=4,alpha = 0.5)
     # plot!(xTest, yOut', c=:orange,label="pred "*L"\textbf{w}_{\textbf{pred}}",w=4,alpha = 0.5)
     # # plot!(xTest, all_ci[:,1], c=:green,label="95% CI Ens",w=4,alpha = 0.5)
     # # plot!(xTest, all_ci[:,2], c=:green,label=false,w=4,alpha = 0.5)
     # plot!(xTest, pred_all_ci[1,:], c=:green1,linestyle=:dot,label="95% CI "*L"\textbf{w}_{\textbf{uq}}",w=4,alpha = 0.5)
     # plot!(xTest, pred_all_ci[2,:], c=:green1,linestyle=:dot,label=false,w=4,alpha = 0.5)
     # yaxis!(ppp, [-1.5,1.5], subplot=1)

     ppp=
     plot(xTest, pred_all_ci[1,:] , fillrange=pred_all_ci[2,:], fillalpha=0.9, linecolor=:transparent, label="95% CI "*L"\textbf{w}_{\textbf{uq}}", w=3, c=:lightblue)
     plot!(xTest, pred_all_ci[1,:], c=:lightblue,label=false,w=4,alpha = 0.9)
     plot!(xTest, pred_all_ci[2,:], c=:lightblue,label=false,w=4,alpha = 0.9)
     plot!(xTest, cos.(xTest),c=:red3, label="True",w=4,alpha = 1)
     plot!(xTest, yOut', c=:dodgerblue3,label="pred "*L"\textbf{w}_{\textbf{pred}}",w=4,alpha = 1)
     plot!(x, y, seriestype=:scatter,c=:lightsteelblue3, xlabel="x", ylabel="y",grid=false,label="Server data",title="Round $(rr)")
     yaxis!(ppp, [-1.5,1.5], subplot=1)


     savefig("/home/bolic/cris/fl/exp_without_truncation/run5/result_$(rr).png")

     # ppp=plot(x, y, seriestype=:scatter, xlabel="x", ylabel="y",grid=false,label="Server data",title="Round $(rr)")
     # plot!(xTest, cos.(xTest),c=:lightblue, label="True",w=4)
     # plot!(xTest, all_means_preds', c=:red,label="mean Ens server",w=4,alpha = 0.5)
     # plot!(xTest, yOut', c=:orange,label="pred "*L"\textbf{w}_{\textbf{pred}}",w=4,alpha = 0.5)
     # plot!(xTest, all_ci[:,1], c=:green,label="95% CI Ens",w=4,alpha = 0.5)
     # plot!(xTest, all_ci[:,2], c=:green,label=false,w=4,alpha = 0.5)
     # plot!(xTest, pred_all_ci[1,:], c=:green1,linestyle=:dot,label="95% CI "*L"\textbf{w}_{\textbf{uq}}",w=4,alpha = 0.5)
     # plot!(xTest, pred_all_ci[2,:], c=:green1,linestyle=:dot,label=false,w=4,alpha = 0.5)
     # yaxis!(ppp, [-1.5,1.5], subplot=1)
     ppp=
     plot(xTest, pred_all_ci[1,:] , fillrange=pred_all_ci[2,:], fillalpha=0.9, linecolor=:transparent, label="95% CI "*L"\textbf{w}_{\textbf{uq}}", w=3, c=:lightblue)
     plot!(xTest, pred_all_ci[1,:], c=:lightblue,label=false,w=4,alpha = 0.9)
     plot!(xTest, pred_all_ci[2,:], c=:lightblue,label=false,w=4,alpha = 0.9)
     plot!(xTest, cos.(xTest),c=:red3, label="True",w=4,alpha = 1)
     plot!(xTest, yOut', c=:dodgerblue3,label="pred "*L"\textbf{w}_{\textbf{pred}}",w=4,alpha = 1)
     plot!(xTest, all_means_preds', c=:purple,linestyle=:dot,label="mean Ens",w=4,alpha = .85)
     plot!(xTest, all_ci[:,1], c=:purple,linestyle=:dot,label="95% CI Ens",w=4,alpha = .5)
     plot!(xTest, all_ci[:,2], c=:purple,linestyle=:dot,label=false,w=4,alpha = .5)
     plot!(x, y, seriestype=:scatter,c=:lightsteelblue3, xlabel="x", ylabel="y",grid=false,label="Server data",title="Round $(rr)")
     yaxis!(ppp, [-1.5,1.5], subplot=1)

     # ppp=plot(x, y, seriestype=:scatter, xlabel="x", ylabel="y",grid=false,label="Server data",title="Round $(rr)")
     # plot!(xTest, cos.(xTest),c=:lightblue, label="True",w=4)
     # plot!(xTest, all_means_preds', c=:red,label="mean Ens server",w=4,alpha = 0.5)
     # plot!(xTest, yOut', c=:orange,label="pred "*L"\textbf{w}_{\textbf{pred}}",w=4,alpha = 0.5)
     # plot!(xTest, all_ci[:,1], c=:green,label="95% CI Ens",w=4,alpha = 0.5)
     # plot!(xTest, all_ci[:,2], c=:green,label=false,w=4,alpha = 0.5)
     # plot!(xTest, pred_all_ci[1,:], c=:green1,linestyle=:dot,label="95% CI "*L"\textbf{w}_{\textbf{uq}}",w=4,alpha = 0.5)
     # plot!(xTest, pred_all_ci[2,:], c=:green1,linestyle=:dot,label=false,w=4,alpha = 0.5)


     # yaxis!(ppp, [-1.5,1.5], subplot=1)

     # ppp=
     # plot(xTest, resultsGP[:,3] , fillrange=resultsGP[:,4], fillalpha=0.9, linecolor=:transparent,label="95% CI GP", w=3, colour="lightblue")
     # plot!(xTest, resultsGP[:,3], c=:lightblue,label=false,w=4,alpha = 1.5)
     # plot!(xTest, resultsGP[:,4], c=:lightblue,label=false,w=4,alpha = 1.5)
     # plot!(xTest, cos.(xTest),c=:red3, label="true",w=4,alpha = 1)
     # plot!(xTest, resultsGP[:,1], c=:dodgerblue3,label="mean GP",w=4,alpha = 1)
     # plot!(x, y, seriestype=:scatter, c=:lightblue, xlabel="x", ylabel="y", grid=false, label="train Data",title="GP optimized via LBFGS")
     # yaxis!(ppp, [-1.5,1.5], subplot=1)


     savefig("/home/bolic/cris/fl/exp_without_truncation/run5/result_$(rr)_full.png")

     # display(ppp)

     # Calculate the width of each CI
     width = pred_all_ci[2,:] .- pred_all_ci[1,:]
     # Calculate the mean width for each approach
     mean_width_pred = mean(width)
     println("Student2 (client) - The average width for 95%  credible intervals of round$(rr) : ", mean_width_pred)
     # Calculate the width of each CI
     width = all_ci[:,2] .- all_ci[:,1]
     # Calculate the mean width for each approach
     mean_width = mean(width)
     println("Ensemble (Server) - The average width for 95%  credible intervals of round$(rr) : ", mean_width)

     println("Student1 (client) - RMSPE(true,pred Student1) of round$(rr) : ", RMSPE(cos.(xTest).+5,yOut'.+5))
     println("Ensemble (Server) - RMSPE(true,mean Ensemble) of round$(rr) : ", RMSPE(cos.(xTest).+5,all_means_preds'.+5))

    return params_global_model, nn_fuq, mean_width_pred
end

# params_global_model = distilling(estimated_params)




updated_models=distilling(estimated_params,0)
global params_global_model = updated_models[1]
global global_model_uq = updated_models[2]
# global avg_width_st2_previous = updated_models[3]
global all_params_ensemble_clients=estimated_params[:]

# Step 2 of 2S algorithm - Client initialization
# Step 3 of 2S algorithm - Federated Training Loop
for cr in 1:100
    println("Communication round: ", cr)
    all_client_params=[]
    for i=1:100 #100 clients with iid data
        # println(i)
        d = Uniform(-5, 9)  #generating iid data for the training of client
        x_client = rand(d, 50)
        y_client = f.(x_client) #client IID data.
        global_model=params2nn(params_global_model)
        e=250
        idt=5
        client_params = train_client(global_model,x_client,y_client,e,idt) #traing client with iid data.
        append!(all_client_params,[client_params])
    end
    for i=1:5 #5 clients with non iid data
        # Example: Client with different data range
        d = Uniform(-5, 2)  # Data range for client
        x_client = rand(d, 50)
        y_client = f.(x_client) #client non IID data.
        global_model=params2nn(params_global_model)
        e=250
        idt=5
        client_params = train_client(global_model,x_client,y_client,e,idt) #traing client with iid data.
        append!(all_client_params,[client_params])
    end
    for i=1:5 #5 clients with non iid data
        # Example: Different noise levels for different clients
        d = Uniform(-5, 9)
        # d = Uniform(-4, 3)
        x_client = rand(d, 50)
        noise1 = 0.5 * randn(50)
        y_client = f.(x_client) + noise1  #client non IID data.
        global_model=params2nn(params_global_model)
        e=250
        idt=5
        client_params = train_client(global_model,x_client,y_client,e,idt) #traing client with iid data.
        append!(all_client_params,[client_params])
    end
    for i=1:25 #5 clients with non iid data
        # Example: Mixed non-iid data generation for clients
        d1 = Uniform(-5, 2)
        noise1 = 0.1 * randn(50)
        x_client = rand(d1, 50)
        y_client = f.(x_client) .+ noise1 .+ 0.15  # Client has small noise and a bias
        global_model=params2nn(params_global_model)
        e=250
        idt=5
        client_params = train_client(global_model,x_client,y_client,e,idt) #traing client with iid data.
        append!(all_client_params,[client_params])
    end

    good_client_params=[]

   # Step 4 of 2S algorithm - Filtering w_i which are in all_client_params from clients
   #check the quality of model trained from clients this is step is performed by server and using the publica data of sever.
    if cr > 200  #we can start to check after some rounds, for example after round 5
        for cp in all_client_params
            u=global_model_uq(x')
            m=params2nn(cp)(x')
            m=vec(m)
            lb=vec(u[1,:])
            ub=vec(u[2,:])
            # Element-wise comparison to check if m is within the range defined by u
            within_range = (m .>= lb) .& (m .<= ub)
            # Calculate the percentage of elements within the range
            percentage_within_range = sum(within_range) / length(m) * 100
            println("Percentage of elements of client pred within CI of student with UQ: ", percentage_within_range, "%")
            if percentage_within_range > 80
                append!(good_client_params,[cp])
            end
        end
    else
        good_client_params=all_client_params[:]
    end
    global all_params_ensemble_clients=[all_params_ensemble_clients;good_client_params]
    # Step 5 of 2S algorithm - Knowledge distillation
    updated_models=distilling(all_params_ensemble_clients,cr)
    # Step 6 of 2S algorithm - Server Output
    global params_global_model = updated_models[1]
    global global_model_uq = updated_models[2]
end
